
To create the tuple containing the characters in the string with respective frequencies, O(n) for time (for loop, per char) and space (worst case, as maybe each string has unique character). Sorting and saving the tuple to list is O(n log n) for python.

The tree input is equal to the length of the char_list/number of elements in a tuple for frequency per char. To build the tree, recursion was done, element per element so with time it's O(n). The space complexity is O(k), k > n, the number of chars. K will include the nodes that store the frequencies that were added up to make the tree. 

To encode the tree, for time, it's O(n log(k)), where n is the number of chars from said string and log(k) relates to the step to reach from head to leaf. Each char process involves traversing the tree to find the right code per char. The space is O(n), because every char has a corresponding bit stream stored to a dictionary.

To decode the tree, each bit in the stream is processed 1 by 1 in the for loop to determine which direction to go in the Huffman tree, so it's O(n) in time. The space occupied is same as the tree, O(k).