The search, at worst case, is O(n). This search function is used in remove duplicates function, thus O(n). I didn't want to use dict() function, to demonstrate that I can traverse through the nodes. Append is about O(n), as we need to go from head through the nodes, to eventually arrive at the end of the node, to append the list. All this used for Union.
In the case of intersection, it's more complicated. Because we have node1 for llist_1 and node2 for llist_2, where there were two for loops + nested loops, O(m*n) is used, where llist_1 is for m size and llist_2 is for n size.